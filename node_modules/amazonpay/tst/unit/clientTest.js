'use strict';

const ENDPOINT = 'https://mws.amazonservices.com/OffAmazonPayments_Sandbox/2013-01-01';

const Helper = require('../../src/amazon-pay/amazonpayclienthelper.js')
const Config = require('./configFile.js');
const assert = require('assert');

const config = new Config();
const configArgs = config.getConfigArguments();

function testConstructUserAgentHeader() {
    const userAgent = 'amazon-pay-sdk-nodejs/1.1.1 (JS/undefined; darwin)';

    assert.equal(userAgent, Helper.constructUserAgentHeader());
}
testConstructUserAgentHeader();

function testGetEndpoint() {
    assert.equal(ENDPOINT, Helper.getEndpoint(configArgs));
}
testGetEndpoint();

function testGetHeaders() {
    const headers = {
        'content-type': 'application/x-www-form-urlencoded',
        'user-agent': Helper.constructUserAgentHeader()
    };

    assert.deepEqual(headers, Helper.getHeaders());    
}
testGetHeaders();

function testSignRequest() {
    const signature = 'E2S9piqp3TfVRBSWuvVKZfA4JxzYBz7wX7z26gZYzuU=';
    const reqParams = {
        'AWSAccessKeyId' : 'ABCDEFGHI1JKLMN2O7',
        'Action' : 'Authorize',
        'AmazonOrderReferenceId' : 'S01-8022464-2595273',
        'AuthorizationAmount.Amount' : '10',
        'AuthorizationAmount.CurrencyCode' : 'USD',
        'AuthorizationReferenceId' : 'Auth123',
        'CaptureNow' : 'false',
        'SellerAuthorizationNote' : 'Test note',
        'SellerId' : 'MERCHANT1234567',
        'SignatureMethod' : 'HmacSHA256',
        'SignatureVersion' : '2',
        'Timestamp' : '2018-07-02T21:04:02Z',
        'TransactionTimeout' : '0',
        'Version' : '2013-01-01'
    };

    assert.equal(signature, Helper.signRequest(ENDPOINT, reqParams, configArgs));
}
testSignRequest();

function testSortRequestParameters() {
    const sorted = [
        'amazonOrderReferenceId',
        'amount',
        'authorizationReferenceId',
        'captureNow',
        'currencyCode',   
        'sellerNote',
        'transactionTimeout'
    ];

    const unsorted = { 
        'amazonOrderReferenceId': 'S01-8022464-2595273',
        'authorizationReferenceId': 'Auth123',
        'amount': '10',
        'currencyCode' : 'USD',   
        'sellerNote': 'Test note',
        'transactionTimeout': '0',
        'captureNow': 'false'
    };
    assert.deepEqual(sorted, Helper.sortRequestParameters(unsorted));
}
testSortRequestParameters();

function testGetParametersAsString() {
    const sorted = [
        'amazonOrderReferenceId',
        'amount',
        'authorizationReferenceId',
        'captureNow',   
        'sellerNote',
        'transactionTimeout'
    ];

    const unsorted = { 
        'amazonOrderReferenceId': 'S01-8022464-2595273',
        'authorizationReferenceId': 'Auth123',
        'amount': '10',  
        'sellerNote': 'Test note',
        'transactionTimeout': '0',
        'captureNow': 'false'
    };

    let string = 'amazonOrderReferenceId=S01-8022464-2595273';
    string += '&amount=10';
    string += '&authorizationReferenceId=Auth123';
    string += '&captureNow=false';
    string += '&sellerNote=Test%20note';
    string += '&transactionTimeout=0';

    assert.equal(string, Helper.getParametersAsString(sorted, unsorted));
}
testGetParametersAsString();